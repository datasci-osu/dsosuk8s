## We need a place in the /home mount to store info that we'd like to add to /etc/passwd, 
## so UIDs can be mapped to usernames for file listing etc.
## (and other persistent admin-level config related to the /home mount)

# if no setting for location for config info, set one
if [[ -z $ADMIN_HOME_DIR ]]; then
  export ADMIN_HOME_DIR=/home/hub_local
fi


# if the dir doesn't exist, create it, write permissions only for admins
if [[ ! -d $ADMIN_HOME_DIR ]] ; then
  mkdir -p $ADMIN_HOME_DIR
  echo "This directory is used for hub-wide environment configuration, package and script installs, etc. It is read/writable by those in the admins group, but only readable by others." > $ADMIN_HOME_DIR/readme.txt
  chown -R $ADMIN_USERNAME:$ADMIN_GROUPNAME $ADMIN_HOME_DIR
  chmod -R 775 $ADMIN_HOME_DIR
fi

# other dirs...
if [[ ! -d $ADMIN_HOME_DIR/automanaged ]] ; then
  mkdir -p $ADMIN_HOME_DIR/automanaged
  echo "This dir managed continuously by hub login processes, please don't edit." > $ADMIN_HOME_DIR/automanaged/readme.txt
  touch $ADMIN_HOME_DIR/automanaged/etc_group_admins
  touch $ADMIN_HOME_DIR/automanaged/etc_group_users
  chown -R $ADMIN_USERNAME:$ADMIN_GROUPNAME $ADMIN_HOME_DIR/automanaged
  chmod -R 775 $ADMIN_HOME_DIR/automanaged
  chmod 664 $ADMIN_HOME_DIR/automanaged/readme.txt $ADMIN_HOME_DIR/automanaged/etc_group_users $ADMIN_HOME_DIR/automanaged/etc_group_admins
fi

if [[ ! -d $ADMIN_HOME_DIR/bin ]] ; then
  cp -r /usr/local/bin/start-notebook.d/templates/bin $ADMIN_HOME_DIR/bin
  echo "This dir is automatically added to everyone's $PATH via the autosourced_by_bashrcs file" > $ADMIN_HOME_DIR/bin/readme.txt
  chown -R $ADMIN_USERNAME:$ADMIN_GROUPNAME $ADMIN_HOME_DIR/bin
  chmod -R 775 $ADMIN_HOME_DIR/bin
  chmod 664 $ADMIN_HOME_DIR/bin/readme.txt
fi

if [[ ! -f $ADMIN_HOME_DIR/autosourced_by_bashrcs ]] ; then
  cp -r /usr/local/bin/start-notebook.d/templates/autosourced_by_bashrcs $ADMIN_HOME_DIR/autosourced_by_bashrcs
  chown $ADMIN_USERNAME:$ADMIN_GROUPNAME $ADMIN_HOME_DIR/autosourced_by_bashrcs
  chmod 664 $ADMIN_HOME_DIR/autosourced_by_bashrcs
fi

PYTHONVERSION=`python -c 'import sys; v = sys.version_info; print("python" + str(v[0]) + "." + str(v[1]))'`
if [[ ! -d $ADMIN_HOME_DIR/python_libs/lib/$PYTHONVERSION/site-packages ]] ; then
  mkdir -p $ADMIN_HOME_DIR/python_libs/lib/$PYTHONVERSION/site-packages
  echo "Hub-wide python packages can be installed here, but note that you must use $ADMIN_HOME_DIR/bin/hubpip to make the installations work properly." > $ADMIN_HOME_DIR/python_libs/readme.txt
  chown -R $ADMIN_USERNAME:$ADMIN_GROUPNAME $ADMIN_HOME_DIR/python_libs
  chmod -R 775 $ADMIN_HOME_DIR/python_libs
  chmod 664 $ADMIN_HOME_DIR/python_libs/readme.txt
fi



# if a class-specific /etc/passwd entry doesn't exist, add it
# here's where entries for /etc/passwd will be appended; but we can't put them directly in /etc/passwd because changes there don't 
# persist
# if lots of people log in for the first time simultaneously, will the NFS be able handle the simultaneous appends? if not some sort of central service to handle this could be setup...
# or I'll just add a little random sleepytime :)
if ! grep -E "^$NB_USER:" $ADMIN_HOME_DIR/automanaged/etc_passwd_additions; then
  sleep `awk 'BEGIN{print 5*rand()}'`   # sleep for a random amount between 1 and 5 seconds
  echo "$NB_USER:x:$NB_UID:$USER_GROUPNAME:,,,:/home/$NB_USER:/bin/bash" >> $ADMIN_HOME_DIR/automanaged/etc_passwd_additions
fi

# set umask (defaulting to rw-rw---- for files and  rwxrwx--- for dirs, so that new files are by 
# default read/write by 
# NB_USER:users; thus the group and user are set appropriately, but they are writable by anyone
# in the users group - including admin users. Trick is, only the owner and anyone in $ADMIN_GROUPNAME
# can access inside home dir itself, because that is owned by NB_USER:$ADMIN_GROUPNAME rwxrwx---)
echo "Defaults umask=007" >> /etc/sudoers
# allow sudo to use this more permissive umasks than the default of union (for use by user jupyter process which is run with sudo -u $NB_USER)
echo "Defaults umask_override" >> /etc/sudoers 


