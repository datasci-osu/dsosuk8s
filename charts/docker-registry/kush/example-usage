echo "${cyan}Example usage:${white}"
echo helm kush template ReleaseName $CHART --kush-interpolate --values custom-values.yaml
echo ""
echo "${cyan}Example custom-values.yaml:${white}"

cat << EOF
kubeContext: cluster-dev
createNamespace: dev-group

# for just a local un-authed registry, use this service def and not the options below
# this can go with the default docker-registry chart to setup a cluster-local dockerhub pull-through cache, accessible at localhost:30050
# (e.g. image would be localhost:30050/username/imagename:tag)

service:
  name: registry
  type: NodePort
  port: 5000
  nodePort: 30050

# option 2: setup an ingress and auth, and global cluster secret to access ()

#basicAuth:
#  username: admin
#  password: adminpass

#createGlobalSecret:
#  secretName: <%= $RELEASE_NAME %>
#  matchNamespace:
#    - '.*'
#  avoidNamespaces:
#    - default
#    - kube-system

#secrets:
#  # remove # below to uncomment for esh
#  htpasswd: <%= $(htpasswd -Bbn $ADMIN_USERNAME $ADMIN_PASSWORD) %>

#ingress:
#  hosts:
#    - registry-dev.domain.tld
#  tls:
#    - hosts:
#      - registry-dev.domain.tld


persistence:
  enabled: true
  size: 60Gi
  # storageClass: '-'

# set the type of filesystem to use: filesystem, s3
storage: filesystem


configData:
  # this configures the registry as a pass-through proxy for dockerhub
  # specify images as this-registry.domain.tlc/owner/image:tag
  proxy:
    remoteurl: https://registry-1.docker.io

nodeSelector: 
  nodegroup-role: clustertools
EOF

echo ""
echo "${yellow}The kubeContext and createNamespace can be used to specify the "
echo "installation context/namespace; settings made via --namespace and "
echo "--kube-context override (and namespace won't be created), if not specified "
echo "helm defaults are used.${white}"


