jupyterhub:
  auth:
    type: dummy
    dummy:
      password: dummy
  
  scheduling:
    userScheduler:
      # TODO: userScheduler wants some cluster-wide priveledges to work, turning off for now
      # this will likely result in less efficient resource utilization, cost undetermined
      enabled: false 
  proxy:
    # TODO: don't hard code this; either generate psuedo-randomly, or ask user for salt and generate
    secretToken: "78767972dd3d0db5a98fb56554f4484daa57bc35bd73dc61aafebed8ac9fe3df"
  singleuser:
    memory:
      limit: 1G
      guarantee: 0.5G
    cpu:
      limit: 0.5
      gaurantee: 1.0
    image:
      name: oneilsh/ktesting-datascience-notebook
      tag: latest
      pullPolicy: Always
    defaultUrl: "/lab"
    cmd: ["start-notebook.sh"]  # this should be the default anyway

    storage:
      type: none
    extraEnv:
      NFS_HOME_SVC: ""
      #CHOWN_HOME: "yes"
      #CHOWN_HOME_OPTS: '-R'
    uid: 0
    fsGid: 0


  ingress:
    enabled: true
    domain: dsosu.us

  hub:
    baseUrl: /
    
    image:
      name: jupyterhub/k8s-hub
      tag: '0.9-484ce8e'   # recent version for DummyAuth and and other features

    extraConfig:
      nfspriv: |
        from kubernetes import client
        def modify_pod_hook(spawner, pod):
            pod.spec.containers[0].security_context = client.V1SecurityContext(
                privileged=True,
                capabilities=client.V1Capabilities(
                    add=['SYS_ADMIN']
                )
            )
            return pod
        c.KubeSpawner.modify_pod_hook = modify_pod_hook

      authsetting: |
        from jupyterhub.auth import DummyAuthenticator
        from tornado import gen

        class DummyExtraAuthenticator(DummyAuthenticator):
          @gen.coroutine
          def pre_spawn_start(self, user, spawner):
            # for use by scripts in start-notebook.d
            # NB_USER is the username logged in with
            # ADMIN_USER is "True" if they're an admin, "False" otherwise
            spawner.environment['NB_USER'] = user.name
            spawner.environment['ADMIN_USER'] = str(user.admin)
            # below for debugging
            #spawner.environment['NB_UID'] = "1000"
            #spawner.environment['GRANT_SUDO'] = "yes"
        
        c.JupyterHub.authenticator_class = DummyExtraAuthenticator
        c.Authenticator.admin_users = {'oneils'}
        c.JupyterHub.admin_access = True

