jupyterhub:
  auth:
    type: dummy
    dummy:
      password: dummy
  
  scheduling:
    userScheduler:
      enabled: true
    userPods:
      nodeAffinity:
        matchNodePurpose: require
    corePods:
      nodeAffinity:
        matchNodePurpose: require
    userPlaceholder:
      enabled: true
      replicas: 5

  cull:
    enabled: true
    timeout: 3600    # cull inactive servers after this long
    every: 600       # how often to check 
    maxAge: 0        # cull servers this old, even if active (0 disables)

  proxy:
    # TODO: don't hard code this; either generate psuedo-randomly, or ask user for salt and generate
    secretToken: "78767972dd3d0db5a98fb56554f4484daa57bc35bd73dc61aafebed8ac9fe3df"
    service: 
      type: ClusterIP
    https:
      enabled: true
      type: offload
  singleuser:
    memory:
      limit: 1G
      guarantee: 0.5G
    cpu:
      limit: 0.5
      gaurantee: 1.0
    image:
      name: oneilsh/ktesting-datascience-notebook
      tag: latest
      pullPolicy: Always
    defaultUrl: "/lab"
    cmd: ["start-singleuser.sh", "--allow-root"]  # don't think I need to add --allow-root... 
    storage:
      type: none
    extraEnv:
      NFS_HOME_SVC: ""
    uid: 0
    fsGid: 0


  ingress:
    enabled: true
    annotations:
      nginx.org/websocket-services: "proxy-public"
    hosts:
    - eksdevd.dsosu.us 
    tls:
    - hosts:
      - eksdevd.dsosu.us

  hub:
    baseUrl: /ummm/
    
    image:
      name: oneilsh/ktesting-k8s-hub
      tag: 'latest'   # installed nativeauthenticator: https://blog.jupyter.org/simpler-authentication-for-small-scale-jupyterhubs-with-nativeauthenticator-999534c77a09

    extraConfig:
      # this doesn't work (proxy secret too) because the proxy is a separate container and doesn't know about
      # config set in the hub's config; they both read it from the chart
      #baseUrl: |
      #  c.JupyterHub.base_url = "/hrm/"

      nfspriv: |
        from kubernetes import client
        def modify_pod_hook(spawner, pod):
            pod.spec.containers[0].security_context = client.V1SecurityContext(
                privileged=True,
                capabilities=client.V1Capabilities(
                    add=['SYS_ADMIN']
                )
            )
            return pod
        c.KubeSpawner.modify_pod_hook = modify_pod_hook

      authsetting: |
        from nativeauthenticator import NativeAuthenticator
        from tornado import gen
        import os

        class NativeExtraAuthenticator(NativeAuthenticator):
          @gen.coroutine
          def pre_spawn_start(self, user, spawner):
            # for use by scripts in start-notebook.d
            # NB_USER is the username logged in with
            # ADMIN_USER is "True" if they're an admin, "False" otherwise
            spawner.environment['NB_USER'] = user.name
            spawner.environment['ADMIN_USER'] = str(user.admin)
            # below for debugging
            #spawner.environment['NB_UID'] = "1000"
            #spawner.environment['GRANT_SUDO'] = "yes"
       
        ## read admin user list from provided values 
        c.JupyterHub.authenticator_class = NativeExtraAuthenticator
       

        admin_users_comma_sep = os.environ["ADMIN_USERS"]  # grab admin usernames from environment variable set in questions.yaml
        admin_users = set([entry.strip() for entry in admin_users_comma_sep.split(",")]) # split it into a set to use
        c.Authenticator.admin_users = admin_users
        c.JupyterHub.admin_access = True

